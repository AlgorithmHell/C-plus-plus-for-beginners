
#include <iostream>
using namespace std;
//////////////////////////////////////////////////////////////////////////////////////////////////
//Вставляет/удаляет строку/столбец из матрицы.//
//////////////////////////////////////////////////////////////////////////////////////////////////
int **creatDynamic(int **arr, int sizeN, int sizeM) {
	arr = new int*[sizeN];
	for (int i = 0; i < sizeN; i++)
		arr[i] = new int[sizeM];
	return arr;
}
int **deletDynamicArray(int **arr, int sizeN) {
	for (int i = 0; i < sizeN; i++)
		delete[] arr[i];

	delete[] arr;

	arr = nullptr;
	return arr;
}

void input(int**arr, int m, int n)
{
	for (int i = 0; i < m; i++)
		for (int j = 0; j < n; j++)
			cin >> arr[i][j];
} //заполнение двумерного динамического массива
void Input(int**arr, int m, int n)
{
	for (int j = 0; j < n; j++)
		for (int i = 0; i < m; i++)
			cin >> arr[i][j];
}

void output(int **arr, int sizeN, int sizeM) {
	cout << "Array: \n";
	for (int n = 0; n < sizeN; n++) {
		cout << "";
		for (int m = 0; m < sizeM; m++) {
			cout << arr[n][m] << " ";
		}
		cout << "\n";
	}
	cout << "\n" << endl;
}
void Output(int**arr, int m, int n)
{
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
			cout << arr[j][i] << " ";
		cout << endl;
	}
}

int **addSrtInArray(int **arr, int &sizeN, int sizeM, int index) {
	index -= 1;
	int **localDymArray = nullptr;
	localDymArray = creatDynamic(localDymArray, sizeN + 1, sizeM);

	for (int n = 0; n < sizeN; n++) {
		if (n < index) {
			for (int m = 0; m < sizeM; m++) {
				localDymArray[n][m] = arr[n][m];
			}
		}
		else {
			for (int m = 0; m < sizeM; m++) {
				localDymArray[n + 1][m] = arr[n][m];
			}
		}
	}

	for (int m = 0; m < sizeM; m++) {// Заполняем новую строку 0
		localDymArray[index][m] = 0;
	}

	arr = deletDynamicArray(arr, sizeN);

	sizeN++;
	return localDymArray;
}

int **addColInArray(int **arr, int &sizeN, int sizeM, int index) {
	index -= 1;
	int **localDymArray = nullptr;
	localDymArray = creatDynamic(localDymArray, sizeN + 1, sizeM);

	for (int n = 0; n < sizeN; n++) {
		if (n < index) {
			for (int m = 0; m < sizeM; m++) {
				localDymArray[n][m] = arr[n][m];
			}
		}
		else {
			for (int m = 0; m < sizeM; m++) {
				localDymArray[n + 1][m] = arr[n][m];
			}
		}
	}

	for (int m = 0; m < sizeM; m++) {// Заполняем новую строку 0
		localDymArray[index][m] = 0;
	}

	arr = deletDynamicArray(arr, sizeN);

	sizeN++;
	return localDymArray;
}

void delColInDynamic(int **arr, int &sizeN, int sizeM, int index) {
	for (int m = index-1; m < (sizeN - 1); m++) {
		for (int n = 0; n < sizeM; n++) {
			arr[m][n] = arr[m + 1][n];
		}
	}
	sizeN--;
}
void delStrInDynamic(int **arr, int &sizeN, int sizeM, int index) {
	for (int n = index-1; n < (sizeN - 1); n++) {
		for (int m = 0; m < sizeM; m++) {
			arr[n][m] = arr[n + 1][m];
		}
	}
	sizeN--;
}



int main()
{
	 int m, n;
	cout << "enter the amount of rows and columns in your array" << endl;
	cin >> m >> n;
	cout << endl;
	int**array = new int*[m]; //объявление двумерного динамического массива
	for (int i = 0; i < m; i++)
		array[i] = new int[n];
	cout << "enter the array by rows" << endl;
	input(array, m, n); //заполнение массива
	system("cls");
	output(array, m, n); //вывод массива матрицей
	
	int add_row;
	cout << "enter number of the row you want to add" << endl;
	cin >> add_row;
	array=addSrtInArray(array, m, n, add_row);
	
	
	cout << endl;
	output(array, m, n);
	int del_row;
	cout << "enter the number of the row you want to delete:\n";
	cin >> del_row;
	cout << endl;
	delStrInDynamic(array, m, n, del_row);
	output(array, m, n);

	int m1, n1;
	cout << "enter the amount of rows and columns in your array" << endl;
	cin >> n1 >> m1;
	cout << endl;
	int**array1 = new int*[m1]; //объявление двумерного динамического массива
	for (int i = 0; i < m1; i++)
		array1[i] = new int[n1];
	cout << "enter the array by rows" << endl;
	Input(array1, m1, n1); //заполнение массива
	system("cls");
	Output(array1, m1, n1); //вывод массива матрицей
	int add_col;
	cout << "enter number of the column you want to add" << endl;
	cin >> add_col;
	array1 = addColInArray(array1, m1, n1, add_col);
	Output(array1, m1, n1);
	


	int del_col;
	cout << "enter the number of the column you want to delete:\n";
	cin >> del_col;
	cout << endl;
	delColInDynamic(array1, m1, n1, del_col);
	Output(array1, m1, n1);


	 
	//освобождаю память 
	
	for (int i = 0; i < m; i++)
	delete[] array[i];
	delete[] array;
	for (int i = 0; i < m1; i++)
		delete[] array1[i];
	delete[] array1;
	

	return 0;
}